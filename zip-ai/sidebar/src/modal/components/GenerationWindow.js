/**
 * Zip Chat - Component - The AI generated editable text.
 */

import { useContext } from '@wordpress/element';
import { __ } from '@wordpress/i18n';
import { AiSparkleIcon, CloseIcon } from '@Scripts/IconComponents';
import { generateNewText } from './helpers/generateNewText';
import { ChatLog, getLastAiMessage } from './helpers/RenderChatLog';

const GenerationWindow = ( props ) => {
	const {
		isAuthorized,
		generationRef,
		currentText,
		userInput,
		setUserInput,
		setRefreshFilters,
		generating,
		setGenerating,
		setAiResponseError,
		validForSaving,
		setValidForSaving,
	} = props;

	const { chatLog, setChatLog } = useContext( ChatLog );

	// Generate new text.
	const generateContent = () => {
		let textContent, textCommand;
		if ( chatLog?.length || currentText ) {
			// If there was a chat, or if this was not an empty Richtext, use that as the content.
			textContent = getLastAiMessage( chatLog, currentText );
			textCommand = userInput;
		} else {
			// Otherwise, use the user input as the content.
			textContent = userInput;
		}
		generateNewText( {
			startingText: currentText,
			textContent,
			textCommand,
			setGenerating,
			setText: setUserInput,
			setRefreshFilters,
			setAiResponseError,
			chatLog,
			setChatLog,
			setValidForSaving,
		} );
	}

	const getDefaultPlaceholder = () => (
		chatLog?.length || '' === currentText ? __( 'How can I help you?', 'ultimate-addons-for-gutenberg' ) : currentText
	);

	const currentPostId = zip_ai_react?.current_post_id;

	return (
		<div className='spectra-open-ai-modal__input-prompt'>
			<textarea
				className='spectra-open-ai-modal__input-prompt--text'
				onChange={ ( event ) => { setUserInput( event.target?.value || '' ) } }
				onKeyDown={ ( event ) => {
					if ( event.key === 'Enter' && ! event.shiftKey ) {
						event.preventDefault();
						if( '' !== userInput.trim() ) {
							generateContent();
						}
					}
				} }
				rows='3'
				ref={ generationRef }
				value={ userInput }
				disabled={ generating || ! isAuthorized }
				placeholder={ generating ? __( 'Generatingâ€¦', 'ultimate-addons-for-gutenberg' ) : getDefaultPlaceholder() }
			/>
			<div className='spectra-open-ai-modal__input-prompt--disclaimer'>
				{ __( 'Disclaimer: Text generated by AI may be inaccurate or offensive.', 'ultimate-addons-for-gutenberg' ) }
			</div>
			<div className='spectra-open-ai-modal__input-prompt--footer'>
				<button
					className='spectra-open-ai-modal__input-prompt--button'
					onClick={ () => generateContent() }
					disabled={ '' === userInput.trim() || generating || ! isAuthorized }
				>
					{ AiSparkleIcon( { color: '#fff' } ) }
					{ __( 'Write for me', 'ultimate-addons-for-gutenberg' ) }
				</button>
				{ validForSaving && (
					<button
						className='spectra-open-ai-modal__input-prompt--button secondary-variant'
						onClick={ () => {
							localStorage.removeItem( `zipAiPreservedChatlog${ currentPostId }` );
							setValidForSaving( false );
							setChatLog( currentText ? [ {
								id: 0,
								from: 'content',
								message: currentText,
							} ] : [] );
							setRefreshFilters( true );
						} }
						disabled={ generating }
					>
						{ CloseIcon( { color: '#fff' } ) }
						{ __( 'Clear Chat', 'ultimate-addons-for-gutenberg' ) }
					</button>
				) }
			</div>
		</div>
	);
}

export default GenerationWindow;
